Elastic Compute Cloud (EC2): Also known as, virtual server based computing.

EC2 instances are just like Virtual Machines.

An EC2 instance basically consists of following components:

 - Amazon Machine Image (AMI) : The Operating system for the ec2 instance(ex: linux, windows etc)
 - Instance Type:   compute power (i.e cpu cores, ram, network bandwidth)
 - Network Interface: Public or Private
 - Storage: the hard disk type. This can be a network hardrive such as EBS or a local instance hardrive.

NOTES:
 - A security group must be assigned to a ec2 instance upon its creation.
 - Each instance must be placed within a subnet under a availability zone and ultimately inside a VPC.
 - There are limits on the amount of instances that user can run at any particular time in a given region.


EC2 buying options:
 - ON Demand Instances:
        - Such instances can be commisioned and de-commisioned at any time.
        - These are the most Flexible but most expensive instances.
        - For certain AMI's pricing is done on Per-Second basis but for remaining AMI's pricing is done on Hourly basis.

*Per-Second Pricing: If the instance is run for 27 Minutes and 30 Seconds, you will be charged for 27 Min and 30 Seconds.
*Hourly Pricing: If the instance is run for 27 Minutes and 30 Seconds, you will be charged for full one hour.
     
 - Reserved Instances:
       - Such instances are just opposite in nature to On-Demand instances. You need to specify the period in advance for which you require the instance. 
         The period is generally of 1 year or 3 year.
       - The payment can be made in 3 ways: Full Advance, Half Advance, No Advance.
       - This is the least Flexible but cheaper method to acquire an instance. 
        

 - Spot Instances: 
       - You need to acquire spot instances from aws marketplace. Aws marketplace is a place where AWS makes unused EC2 instances available to be used by anybody.
       - However, this is ofcourse not free. You need to bid for the instance and the instance will be commissioned to you only when the Spot price for the instance
         dips below your Bid price.
       - There is also a catch that if the Spot price rises above your Bid price then the instance will be de-commissioned and removed from your account. No matter you are using it or not. Means, there is a high chance that you are in the middle of something important and the instance just gets removed from you. 
       - So, Spot insances are useful only for R&D type of situations.

Consider the following scenario to better undertand, Spot instances:     
  Suppose, you set your bid at Rs 10. for an instance type t2.micro at 9:00 AM and the Spot price at that time was Rs:20.
   -- You will not get the instance.
  Now, At 10:00 AM Spot price drops to Rs 10.
   -- You will be assigned the instance for use.  
  Now, At 11:00 AM Spot price again drops to Rs 5.
   -- Instance will still be available to you.
  Now, At 11:55 AM Spot prices rises to Rs 20.
   -- Instance will be detached from you. No matter how important your work is.   
--------------------------------------------------------------------------------------------------------

Amazon Machine Image(AMI):
----------------------------
An AMI is a preconfigured package that is required to launch an EC2 instance. An AMI package contains:
 - Operation System
 - Required Softwares
 - Additional settings

Note: An AMI is very similar to docker images. The relation between AMI and EC2 is same as that between docker image and container.

You can create your own AMI's or Pick a one from AWS community and marketplace. Since, you can create your own AMI's, it becomes very easy 
to have a preconfigured deployable image of the Application.

Virtualization:
-------------------
As we know, an EC2 is just a virtual machine. So, there needs to be a hypervisor sitting between EC2'2 and actual server hardware to manage computing resources.
AWS makes use of  XEN Hypervisorto do the same.

Note: Using the 'Tenancy' option during instance creation, you can choose if you want a dedicated hardware for your EC2.
        
EC2 Instance Types:
-------------------
In AWS, Instance type is the term used to recognize the composition of Harware Resources in an EC2. Harware Resources include:
- Compute Power (cpu)
- Memory (ram)
- Storage (HDD/SSD)
- Network Bandwidth

As an Architect it is important to choose correct instance type based on application workload.

Following is the chart, showing instance type and its family:

General Purpose family:
t2, m3 -> perfect balance of cpu,ram and bandwidth

Compute OPtimized:
c3, c4 -> For High traffic frontend sites, webservers.

Storage Optimized:
d2, i2 -> For Handling large scale data warehouse.

GPU OPtimized:
g2, p2 -> For machine learning and high performance databases.

Memory Optimized:
r3,r4,x1 -> In memory databses, such as redis, memcache.

EC2 IP Addresses:
--------------------

Private IP address:
  - All EC2 instances are created with a private IP address.
  - Private IP address is used for communications within a VPC network.

Public IP address:
  - When creating an EC2 instance you can choose to auto-assign a Public IP address along with the Private IP.
  - A public IP address is mandatory, if the EC2 wishes to directly talk a server residing outside VPC.

Elastic IP address:
  - Elastic IP addresses are also public.
  - Elastic IP addresses are static addresses which once created can be assigned to any EC2 instance within the VPC.
  - Some common uses of Elastic IP addresses are:
         - I forgot to check auto-assign public IP during EC2 instance creation. What to do now?
            ANS: No problem. Just create a Elastic IP address and assign to your EC2 instance.
         - My application internally calls url http://212.33.44.55/index.php, but the EC2 instance having IP 212.33.44.55 is dead. what now??
            Ans: If it was a Elastic IP, just assign it to another EC2 and you are done.
  - Elastic IPs first needs to be created before they can be used. 
  - You cannot randomly choose any Ip address as your Elastic IP address, AWS assigns it to you.

Bootstrapping userdata in EC2:
-------------------------------
During the instance creation, we can also provide a set of bash commands which will be run once the EC2 is instantiated.
Following is the example of installing and running a http server on centos based EC2:
#!/bin/bash
 yum update -y
 yum install -y httpd
 service httpd start

Once, logged into EC2 following command can be used to view userdata commands run during bootstrapping:
curl http://169.254.169.254/latest/user-data  //displays bootstrapping commands
curl http://169.254.169.254/latest/meta-data  //displays AMI, instance-type details
