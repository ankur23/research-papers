
1. Cloud benefits:
a:) Availability
     => data is available from everywhere and anytime.
b:) Fault Tolerent
     => incase a failure occurs, data is not lost. 
             &&
     => the application is still functional even though few of its parts are broken. 
c:) Scalability 
     => Automataic increase of instances when load increases.
d:) Elasticity
     => Automatic increase/decrease of instances when load increases/decreases.

Regions and availibity zones:
A region constitutes of one or many availability zones(datacenters).
Availibility zones within same Region generally contains redundant copies of data so as to avoid data loss incase whole 
datacenter is on fire.
So, if a Region R has 3 availability zones A,B,C. Then a file F1 can most probably be found on more than one availibity zone. 
NOte: take figure from VPC, video1 , 3:05 


##################################################################

IAM:
https://linuxacademy.com/cp/courses/lesson/course/767/lesson/2/module/91
1. Users => these users can login into AWS console and perform actions based on the access (policies) provided to them.

2. Groups => A group consists of one or more users. Access rights can be attached directly to a group and it will be applicable to
all the users belonging to that group.

3. Policies => These are access rights which can be assigned to a user, group or role.

4. Roles => Roles comes in picture when an AWS service needs to access another AWS service. 
Suppose an EC2 instance wants to access a S3 bucket. In such a scenario, we need to provide correct access rights to EC2 instance so it can 
access S3 bucket. However, access rights cannot be directly assigned to a service, the solution is to assign the rights to something called 
Role and then this Role is attached to the service.
Roles are just like groups, the difference is that they get assigned to a AWS service (like EC2) instead of users.

###############################################################################################################

VPC:

vpc (virtual private cloud): 
  a vpc is a logically isolated section of AWS cloud dedicated only to you. 
  Inside a vpc you have full control and you can even define your own virtual network and you will posses full control over this network.
  Like: creation of subnets, confiuration of routing tables and network gateways.

vpc can be simply conceptualized as a home private network. Any home network which talks to internet has following components:
1. Modem: Provides gateway to internet.
2. Router: Provides communication between home devices and also routes traffic to external devices through modem.
3. Firewall: controls the incoming and outgoing traffic from computers.
4. Computers: end Receiver or sender of traffic. 
Fig: VPC, video2 5:09

Comparing the components of a home network with the components of a VPC, we can see how similar both are:

      VPC                                        Home network
  Internet Gateway                                  Modem
    Route Table                                     Router
  Network ACL                                       Firewall
   EC2 Instance                                     Computers

FIG: VPC, video2 8:03

NOTE: When you create a AWS account a defaul VPC is created for you. Including components which are required to make it functional:
1. Internet Gateway (IGW) to talk to internet
2. A Route table with predefined routes to default subnets.
3. A network access control list.
4. Subnets.

---------------------------------------
Internet Gateway:
  An Internet gateway is acombination of h/w and s/w which provide your private network a route to internet.

Note: IGW is horizontally scaled so it imposes no bandwidth constraint, it is as well redundant and higly available so it imposes no availability risks.

Note:
 -> Only 1 Internet gateway can be attached to a VPC at a time.
 -> An internet gateway cannot be detached from a VPC, while there are active AWS resources in the VPC(such as EC2 or RDS).

-------------------------------------------

Route Table:
   A route table consists of set of rules called routes, these are used to determine where network traffic is to be directed.

Note: The default VPC already has "main" route table.

Note:
  -> unlike a IGW, a VPC can have multiple route tables attached.
  -> A route table cannot be deleted if it has any subnet associated to it.
 

----------------------------------------------

Network Access Control List:
   A NACL is a firewall (security layer) which controls traffic moving in and out of one or more subnets.

NOTE: the default VPC already has a NACL in place. However, it has all inbound/outbound traffic allowed.

NACL's have 2 types of rules for controlling traffic:
a:) Inbound rules: Applies for incoming traffic to subnets.
b:) Outbound rules: Applies for outgoing trafifc from subnets.

FIG: VPC video5 2:07

Rules are evaluated based on rule numbers, the rule with lower rule number gets priority over higher one.
As soon as a traffic type matches a rule that rule is applied to for the traffic type neglecting all lower priority rules.

ex:

Rule no.            type           port          Action
 80                 HTTP            80           ALLOW
 90                 HTTP            80           DENY
 100                 ALL            ALL          DENY

In this example, when a HTTP traffic will come on port 80, it will be allowed entry in subnet, as the RULE 80 will match and get evaluated
and all the other rules will be ignored. However, if a HTTP traffic will come on port 8080 it will not be allowed, as it will match up
RULE 100 which states to block all traffic.

Rule no.            type           port          Action
 70                  ALL            ALL          DENY
 80                 HTTP            80           ALLOW
 90                 HTTP            80           DENY
 100                 ALL            ALL          ALLOW

In this example, none of the traffic will be allowed entry in subnet as each traffic will match the RULE 70 and so rest
all the rules will get ignored and the traffic will simple be restricted.

Note:
 -> A NACL can have multiple subnets under its hood but a subnet can belong to only one NACL at a time.
    i.e a subnet cannot be associated with two NACL's
 -> NACL controls the traffic in/out of subnet once inside the subnet AWS resources may have their own controlling rules.


------------------------------------------------------------

Subnets:
  A subnet is a subnetwork within our private network (VPC).
  A VPC cannot span over multiple Regions, its limited to a single region but it spans over all the availibity zones in that region.
  Similarly, a subnet cannot span over multiple availibity zones, its limited to a single zone. 

NOTE: A single Availibity zone can have multiple subnets all belonging to same VPC.

NOTE: By default, a subnet for each availibity zone is created and linked to VPC. 

So, if the VPC is created in n. virginia, which have 4 Availibity zones namely A,B,C,D. 
One subnet for each availibity zone will be created and assigned to it by default. Some thing like:
A => s1, B=> s2, C=> s3, D=> s4 //where s1,s2,s3,s4 are subnets.  


Suppose the VPC has following address range 172.31.0.0/16:

Means it has 65536 available host ips. It will be broken into 4 subnets as:

Subnet S1 =  172.31.0.0/18    = 16384 ips  00   = Availibility zone A
Subnet S2 =  172.31.64.0/18   = 16384 ips  01   = Availibility zone B
Subnet S3 =  172.31.128.0/18  = 16384 ips  10   = Availibility zone C
Subnet S4 =  172.31.192.0/18  = 16384 ips  11   = Availibility zone D

Public Subnets vs Private Subnets:
----------------------------------

Public subnets have a route to internet while private subnets does not have a route to internet.
A private subnet is created as follows:
 1. Create a route table which does not have any route to IGW.
 2. Attach the subnet you want to make private to this new route table. 

FIG: vpc video6 4:19

NOTE: 
 -> I believe a subnet cannot be associated with multiple Route Tables (need to verify this.).
 -> If no route table is explicitely attached to a subnet, traffic of that subnet is governed by default "main" route table.

FIG: VPC video6 10:54 

###################################################################

Elastic Compute Cloud (EC2): Also known as, virtual server based computing.

EC2 instances are just like Virtual Machines.

An EC2 instance basically consists of following components:

 - Amazon Machine Image (AMI) : The Operating system for the ec2 instance(ex: linux, windows etc)
 - Instance Type:   compute power (i.e cpu cores, ram, network bandwidth)
 - Network Interface: Public or Private
 - Storage: the hard disk type. This can be a network hardrive such as EBS or a local instance hardrive.

NOTES:
 - A security group must be assigned to a ec2 instance upon its creation.
 - Each instance must be placed within a subnet under a availability zone and ultimately inside a VPC.
 - There are limits on the amount of instances that user can run at any particular time in a given region.


EC2 buying options:
 - ON Demand Instances:
        - Such instances can be commisioned and de-commisioned at any time.
        - These are the most Flexible but most expensive instances.
        - For certain AMI's pricing is done on Per-Second basis but for remaining AMI's pricing is done on Hourly basis.

*Per-Second Pricing: If the instance is run for 27 Minutes and 30 Seconds, you will be charged for 27 Min and 30 Seconds.
*Hourly Pricing: If the instance is run for 27 Minutes and 30 Seconds, you will be charged for full one hour.
     
 - Reserved Instances:
       - Such instances are just opposite in nature to On-Demand instances. You need to specify the period in advance for which you require the instance. 
         The period is generally of 1 year or 3 year.
       - The payment can be made in 3 ways: Full Advance, Half Advance, No Advance.
       - This is the least Flexible but cheaper method to acquire an instance. 
        

 - Spot Instances: 
       - You need to acquire spot instances from aws marketplace. Aws marketplace is a place where AWS makes unused EC2 instances available to be used by anybody.
       - However, this is ofcourse not free. You need to bid for the instance and the instance will be commissioned to you only when the Spot price for the instance
         dips below your Bid price.
       - There is also a catch that if the Spot price rises above your Bid price then the instance will be de-commissioned and removed from your account. No matter you are using it or not. Means, there is a high chance that you are in the middle of something important and the instance just gets removed from you. 
       - So, Spot insances are useful only for R&D type of situations.

Consider the following scenario to better undertand, Spot instances:     
  Suppose, you set your bid at Rs 10. for an instance type t2.micro at 9:00 AM and the Spot price at that time was Rs:20.
   -- You will not get the instance.
  Now, At 10:00 AM Spot price drops to Rs 10.
   -- You will be assigned the instance for use.  
  Now, At 11:00 AM Spot price again drops to Rs 5.
   -- Instance will still be available to you.
  Now, At 11:55 AM Spot prices rises to Rs 20.
   -- Instance will be detached from you. No matter how important your work is.   
--------------------------------------------------------------------------------------------------------

Amazon Machine Image(AMI):
----------------------------
An AMI is a preconfigured package that is required to launch an EC2 instance. An AMI package contains:
 - Operation System
 - Required Softwares
 - Additional settings

Note: An AMI is very similar to docker images. The relation between AMI and EC2 is same as that between docker image and container.

You can create your own AMI's or Pick a one from AWS community and marketplace. Since, you can create your own AMI's, it becomes very easy 
to have a preconfigured deployable image of the Application.

Virtualization:
-------------------
As we know, an EC2 is just a virtual machine. So, there needs to be a hypervisor sitting between EC2'2 and actual server hardware to manage computing resources.
AWS makes use of  XEN Hypervisorto do the same.

Note: Using the 'Tenancy' option during instance creation, you can choose if you want a dedicated hardware for your EC2.
        
EC2 Instance Types:
-------------------
In AWS, Instance type is the term used to recognize the composition of Harware Resources in an EC2. Harware Resources include:
- Compute Power (cpu)
- Memory (ram)
- Storage (HDD/SSD)
- Network Bandwidth

As an Architect it is important to choose correct instance type based on application workload.

Following is the chart, showing instance type and its family:

General Purpose family:
t2, m3 -> perfect balance of cpu,ram and bandwidth

Compute OPtimized:
c3, c4 -> For High traffic frontend sites, webservers.

Storage Optimized:
d2, i2 -> For Handling large scale data warehouse.

GPU OPtimized:
g2, p2 -> For machine learning and high performance databases.

Memory Optimized:
r3,r4,x1 -> In memory databses, such as redis, memcache.

EC2 IP Addresses:
--------------------

Private IP address:
  - All EC2 instances are created with a private IP address.
  - Private IP address is used for communications within a VPC network.

Public IP address:
  - When creating an EC2 instance you can choose to auto-assign a Public IP address along with the Private IP.
  - A public IP address is mandatory, if the EC2 wishes to directly talk a server residing outside VPC.

Elastic IP address:
  - Elastic IP addresses are also public.
  - Elastic IP addresses are static addresses which once created can be assigned to any EC2 instance within the VPC.
  - Some common uses of Elastic IP addresses are:
         - I forgot to check auto-assign public IP during EC2 instance creation. What to do now?
            ANS: No problem. Just create a Elastic IP address and assign to your EC2 instance.
         - My application internally calls url http://212.33.44.55/index.php, but the EC2 instance having IP 212.33.44.55 is dead. what now??
            Ans: If it was a Elastic IP, just assign it to another EC2 and you are done.
  - Elastic IPs first needs to be created before they can be used. 
  - You cannot randomly choose any Ip address as your Elastic IP address, AWS assigns it to you.

Bootstrapping userdata in EC2:
-------------------------------
During the instance creation, we can also provide a set of bash commands which will be run once the EC2 is instantiated.
Following is the example of installing and running a http server on centos based EC2:
#!/bin/bash
 yum update -y
 yum install -y httpd
 service httpd start

Once, logged into EC2 following command can be used to view userdata commands run during bootstrapping:
curl http://169.254.169.254/latest/user-data  //displays bootstrapping commands
curl http://169.254.169.254/latest/meta-data  //displays AMI, instance-type details

  

 





 



























 
  





























  








  














                                       










vpc:
subnets:
NACL:
Intergnet gateway:
Route table:
Security group:








